(()=>{"use strict";var e={61:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(15),o=t.n(r),a=t(645),i=t.n(a),c=t(973),l=i()(o());l.i(c.Z),l.push([e.id,"*{padding:0;margin:0;box-sizing:border-box}body{overflow:hidden}#cellular-automate{display:grid;grid-template-columns:repeat(5, 1fr);grid-template-rows:repeat(5, 1fr);grid-column-gap:0px;grid-row-gap:0px;height:100vh;padding:10px}#cellular-automate #cellular-automate-canvas{grid-area:1/1/9/10;width:100%;height:100%;display:flex;justify-content:center}#cellular-automate #cellular-automate-canvas #canvas-container{border:2px solid #000;width:100%}#cellular-automate #cellular-automate-canvas #canvas-container canvas{background-color:#574e42}#cellular-automate #cellular-automate-controls{grid-area:10/1/10/10}","",{version:3,sources:["webpack://./src/styles/index.scss"],names:[],mappings:"AAEA,EACI,SAAA,CACA,QAAA,CACA,qBAAA,CAIJ,KACI,eAAA,CAOJ,mBACI,YAAA,CACA,oCAAA,CACA,iCAAA,CACA,mBAAA,CACA,gBAAA,CACA,YAAA,CACA,YAAA,CAIA,6CACI,kBAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,sBAAA,CAEA,+DAGI,qBAAA,CACA,UAAA,CAGA,sEACI,wBAAA,CAMZ,+CACI,oBAAA",sourcesContent:["@import 'tailwindcss/tailwind.css';\n\n* {\n    padding   : 0;\n    margin    : 0;\n    box-sizing: border-box;\n\n}\n\nbody {\n    overflow: hidden;\n\n}\n\n\n\n\n#cellular-automate {\n    display              : grid;\n    grid-template-columns: repeat(5, 1fr);\n    grid-template-rows   : repeat(5, 1fr);\n    grid-column-gap      : 0px;\n    grid-row-gap         : 0px;\n    height               : 100vh;\n    padding              : 10px;\n\n\n\n    #cellular-automate-canvas {\n        grid-area      : 1 / 1 / 9/ 10;\n        width          : 100%;\n        height         : 100%;\n        display        : flex;\n        justify-content: center;\n\n        #canvas-container {\n\n\n            border: 2px solid #000;\n            width : 100%;\n\n\n            canvas {\n                background-color: rgb(87, 78, 66);\n            }\n        }\n\n    }\n\n    #cellular-automate-controls {\n        grid-area: 10 / 1 / 10 / 10;\n    }\n\n}"],sourceRoot:""}]);const s=l},973:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"@tailwind base;\n\n@tailwind components;\n\n@tailwind utilities;\n","",{version:3,sources:["webpack://./node_modules/tailwindcss/tailwind.css"],names:[],mappings:"AAAA,cAAc;;AAEd,oBAAoB;;AAEpB,mBAAmB",sourcesContent:["@tailwind base;\n\n@tailwind components;\n\n@tailwind utilities;\n"],sourceRoot:""}]);const c=i},771:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n","",{version:3,sources:["webpack://./src/styles/index.css"],names:[],mappings:"AAAA,cAAc;AACd,oBAAoB;AACpB,mBAAmB",sourcesContent:["@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&o[l[0]]||(t&&(l[2]?l[2]="".concat(t," and ").concat(l[2]):l[2]=t),n.push(l))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var r,o,a=[],i=!0,c=!1;try{for(t=t.call(e);!(i=(r=t.next()).done)&&(a.push(r.value),!n||a.length!==n);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==t.return||t.return()}finally{if(c)throw o}}return a}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(l," */"),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(u).concat([s]).join("\n")}return[a].join("\n")}},379:(e,n,t)=>{var r,o=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),a=[];function i(e){for(var n=-1,t=0;t<a.length;t++)if(a[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],o=0;o<e.length;o++){var c=e[o],l=n.base?c[0]+n.base:c[0],s=t[l]||0,u="".concat(l," ").concat(s);t[l]=s+1;var d=i(u),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:u,updater:A(f,n),references:1}),r.push(u)}return r}function l(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=t.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var s,u=(s=[],function(e,n){return s[e]=n,s.filter(Boolean).join("\n")});function d(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(n,o);else{var a=document.createTextNode(o),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(a,i[n]):e.appendChild(a)}}function f(e,n,t){var r=t.css,o=t.media,a=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function A(e,n){var t,r,o;if(n.singleton){var a=h++;t=p||(p=l(n)),r=d.bind(null,t,a,!1),o=d.bind(null,t,a,!0)}else t=l(n),r=f.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=i(t[r]);a[o].references--}for(var l=c(e,n),s=0;s<t.length;s++){var u=i(t[s]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}t=l}}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(973);n()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var o=t(771);n()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;var a=t(61);n()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;var i=document.querySelector("#cellular-automate-controls-sliders-speed-input"),c=document.querySelector(".speed-range-value");i.addEventListener("input",(function(){c.innerText=""+this.value}));var l=document.getElementById("canvas-container"),s=document.createElement("canvas");s.id="canvas",s.width=l.offsetWidth-4,s.height=l.offsetHeight-4,l.appendChild(s),document.querySelector("#cellular-automate-controls-sliders-speed-input");var u=s.getContext("2d"),d=[[!1,!1,!1],[!1,!1,!0],[!1,!0,!1],[!1,!0,!0],[!0,!1,!1],[!0,!1,!0],[!0,!0,!1],[!0,!0,!0]],f=function(){return e=void 0,n=void 0,r=function(){var e,n,t,r,o;return function(e,n){var t,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(a){return function(c){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=n.call(e,i)}catch(e){a=[6,e],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(a){for(e=0,t=0;t<d.length;t++)for(r=0;r<d[t].length;r++)o=0,2===r&&(o=(s.width-20*d.length*3)/(d.length-1)),u.fillStyle=d[t][r]?"black":"white",u.fillRect(e,1,19,19),e=e+20+o;for(n=function(e){for(var n=[],t=0;t<Math.pow(2,e);t++){var r=t.toString(2),o="0".repeat(e-r.length)+r;n.push(o.split("").map(Number))}return n}(d.length),e=0,t=0;t<n.length;t++)for(e=20,r=0;r<n[t].length;r++)u.fillStyle=n[t][r]?"black":"white",o=(s.width-60)/7,u.fillRect(e,20*t+40,19,19),e+=o;return[2]}))},new((t=void 0)||(t=Promise))((function(o,a){function i(e){try{l(r.next(e))}catch(e){a(e)}}function c(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,c)}l((r=r.apply(e,n||[])).next())}));var e,n,t,r},p={x:l.offsetWidth/2,y:l.offsetHeight/2},h=1;function A(e){return e.touches&&1==e.touches.length?{x:e.touches[0].clientX,y:e.touches[0].clientY}:e.clientX&&e.clientY?{x:e.clientX,y:e.clientY}:void 0}var v=!1,m={x:0,y:0};function g(e){v=!0,m.x=A(e).x/h-p.x,m.y=A(e).y/h-p.y}function y(e){v=!1,C=null,x=h}function b(e){v&&(p.x=A(e).x/h-m.x,p.y=A(e).y/h-m.y)}function w(e,n){1==e.touches.length?n(e):"touchmove"==e.type&&2==e.touches.length&&(v=!1,function(e){e.preventDefault();var n=e.touches[0].clientX,t=e.touches[0].clientY,r=e.touches[1].clientX,o=e.touches[1].clientY,a=Math.pow(n-r,2)+Math.pow(t-o,2);null==C?C=a:E(null,a/C)}(e))}var C=null,x=h;function E(e,n){v||(e?h+=e:n&&(console.log(n),h=n*x),h=Math.min(h,5),h=Math.max(h,.07))}s.addEventListener("mousedown",g),s.addEventListener("touchstart",(function(e){return w(e,g)})),s.addEventListener("mouseup",y),s.addEventListener("touchend",(function(e){return w(e,y)})),s.addEventListener("mousemove",b),s.addEventListener("touchmove",(function(e){return w(e,b)})),s.addEventListener("wheel",(function(e){return E(5e-4*e.deltaY,null)})),function e(){s.width=l.offsetWidth-4,s.height=l.offsetHeight-4,u.scale(h,h),u.translate(-l.offsetWidth/2+p.x,-l.offsetHeight/2+p.y),u.clearRect(0,0,l.offsetWidth,l.offsetHeight),f(),console.log("draw"),requestAnimationFrame((function(){return e()}))}();var B=s.toDataURL("image/png",1);document.getElementsByClassName("download-image")[0].href=B,console.log(document.getElementById("canvas-container")),document.getElementById("canvas-container").addEventListener("mousemove",(function(e){I.setInputValue("x",e.offsetX),I.setInputValue("y",e.offsetY)}));var I=new function(){this.setInputValue=function(e,n){this.coordinates[e]=n},this.getInputValue=function(e){return this.coordinates[e]},this.coordinates={x:0,y:0}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,